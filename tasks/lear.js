/*
 * grunt-lear
 * https://github.com/eward/grunt-lear
 *
 * Copyright (c) 2013 shepherdwind
 * Licensed under the MIT license.
 */
/*jsl:ignore*/
'use strict'

var path = require("path")
var parse = require("./htmlParser").parse
var fs = require("fs")
var util = require("util")

module.exports = function (grunt) {

  var Template = "" + 
      "/**\n" +
      " * Generated By grunt-lear\n" +
      " */\n" +
      "KISSY.add(function(S<%= requiresObj %>){\n" +
      "    return { html: '<%= tpl %>', mods: <%= mods %> };\n" +
      "}, {requires: [<%= requires %>]});"

  var cwd = process.cwd()

  function kissy_template(src, dest, requires, requiresObj, mods) {

    var moduleJS = grunt.template.process(Template, { 
      data: { 
        tpl: src ,
        requires: requires.join(','),
        requiresObj: requiresObj,
        mods: JSON.stringify(mods).replace(/"/g, '')
      } 
    })

    grunt.file.write(dest, moduleJS)
    grunt.log.writeln('File "' + dest + '" created.')
  }

  grunt.registerMultiTask('lear', 'Your task description goes here.', function () {

    this.files.forEach(function (file) {

      var pwd = path.join(cwd, file.orig.cwd);

      var src = file.src.filter(function (filepath) {

        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.')
          return false
        } else {
          return true
        }

      }).map(function (filepath) {

        var content =  grunt.file.read(filepath).replace(/[\n\r]+/g, '\\n').replace(/'/g, '\\\'')

        var dirs = fs.readdirSync(pwd).filter(function(file){
          var stat = fs.statSync(path.join(pwd, file))
          return stat.isDirectory()
        })

        var dest = filepath + '.js'
        var parts = parse(content, dirs)
        var requires = []
        var mods = {}
        var requiresObj = []
        content = ''

        parts.forEach(function(part){

          if (typeof part == 'string'){
            content += part
          } else {
            var tagname = part.tagname
            content += util.format("' + %s.html + '", tagname)
            requires.push(part.require)
            mods[tagname] = tagname
            requiresObj.push(tagname)
          }

        })

        requiresObj = requiresObj.length > 0 ? ',' + requiresObj.join(',') : ''
        kissy_template(content, dest, requires, requiresObj, mods)

        return content

      }).join(' ')

    })
  })

}
;/*jsl:end*/
